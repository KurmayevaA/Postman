{
	"info": {
		"_postman_id": "af93d70b-7be4-4057-b127-fa7f38c45b04",
		"name": "HW#2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26053092"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"var resp_token = jsonData.token\r",
							"console.log (resp_token)\r",
							"\r",
							"pm.environment.set(\"token\", resp_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Sasha",
							"type": "text"
						},
						{
							"key": "password",
							"value": "111",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "New_Data",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "sveta",
							"type": "text"
						},
						{
							"key": "age",
							"value": "22",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//   Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request\r",
							"var resp_name = jsonData.name\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var resp_age = jsonData.age\r",
							"\r",
							"// Проверить, что age в ответе равно age s request\r",
							"var req = request.data;\r",
							"var req_age = req.age;\r",
							"\r",
							"console.log(\"resp_age = \" + resp_age)\r",
							"console.log(\"req_age = \" + req_age)\r",
							"\r",
							"pm.test(\"req_resp_name_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Sasha\");\r",
							"});\r",
							"\r",
							"pm.test(\"req_resp_age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request\r",
							"var jsonData = pm.response.json();\r",
							"var resp_salary = jsonData.salary\r",
							"\r",
							"var req = request.data;\r",
							"var req_salary = req.salary;\r",
							"\r",
							"pm.test(\"req_resp_salary_check\", function () {\r",
							"    pm.expect(resp_salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var resp_name = jsonData.name;\r",
							"\r",
							"// Спарсить request.\r",
							"var req = request.data\r",
							"\r",
							"// Проверить, что name в ответе равно name s request\r",
							"var req_name = req.name\r",
							"\r",
							"console.log(\"resp_name = \" + resp_name)\r",
							"console.log(\"req_name = \" + req_name)\r",
							"\r",
							"pm.test(\"req_resp_name_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request\r",
							"var jsonData = pm.response.json();\r",
							"var resp_age = jsonData.age;\r",
							"\r",
							"\r",
							"var req = request.data\r",
							"var req_age = req.age\r",
							"\r",
							"console.log(\"resp_age = \" + resp_age)\r",
							"console.log(\"req_age = \" + req_age)\r",
							"\r",
							"pm.test(\"req_resp_age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var resp_salary = jsonData.salary;\r",
							"\r",
							"var req = request.data;\r",
							"var req_salary = +req.salary;\r",
							"\r",
							"console.log(\"resp_salary = \" + resp_salary)\r",
							"console.log(\"req_salary = \" + req_salary)\r",
							"\r",
							"pm.test(\"req_resp_salary_check\", function () {\r",
							"    pm.expect(resp_salary).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"var resp_family = jsonData.family\r",
							"console.log(\"Resp_family =\", resp_family);\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4\r",
							"var req = request.data\r",
							"var resp_u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
							"var req_salary = req.salary;\r",
							"\r",
							"\r",
							"pm.test(\"check_u_salary_1_5_year_salary*4\", function () {\r",
							"    pm.expect(resp_u_salary_1_5_year).to.eql(req_salary*4);\r",
							"});\r",
							"\r",
							"\r",
							"console.log()"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Sasha",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						},
						{
							"key": "token",
							"value": "{{token}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"            // Отправить запрос.\r",
							"            //  Статус код 200\r",
							"            //  Спарсить response body в json\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"            // Спарсить request\r",
							" var resp = pm.response.json();\r",
							" var req = pm.request.url.query.toObject()\r",
							"\r",
							"            //  Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name_check_from_request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"\r",
							"         //  Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age_check_from_request\", function () {\r",
							"    pm.expect(resp.age).to.eql(req.age);\r",
							"});\r",
							"\r",
							"        // Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary_check_from_request\", function () {\r",
							"    pm.expect(resp.salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"       //  Вывести в консоль параметр family из response\r",
							"console.log(resp.family);\r",
							"        \r",
							"       // Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"check_dog_have_name\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"     //  Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"check_dog_have_age\"), function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"age\");\r",
							"};\r",
							"\r",
							"    // Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"check_dog_have_name_luky\"), function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"Luky\");\r",
							"};      \r",
							"\r",
							"    // Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"check_age_have_4\"), function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(4);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Sasha&age=23&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Sasha"
						},
						{
							"key": "age",
							"value": "23"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"         //     Отправить запрос.\r",
							"         // 2. Статус код 200\r",
							"         // 3. Спарсить response body в json\r",
							"var jsonData = pm.response.json();\r",
							"   \r",
							"        // Спарсить request\r",
							"var resp = pm.response.json();\r",
							"var req = pm.request.url.query.toObject()       \r",
							"\r",
							"       // Проверить, что name в ответе равно name s request\r",
							"pm.test(\"name_check_from_request\", function () {\r",
							"    pm.expect(resp.name).to.eql(req.name);\r",
							"});\r",
							"      // Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age_check_from_request\", function () {\r",
							"    pm.expect(resp.age).to.eql(+req.age);\r",
							"});      \r",
							"     // Вывести в консоль параметр salary из request\r",
							"console.log(req.salary);\r",
							"\r",
							"     // Вывести в консоль параметр salary из response\r",
							"console.log(resp.salary)    \r",
							"\r",
							"     //Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(\"request_salary = \" + req.salary);\r",
							"console.log(\"response_salary = \" + resp.salary); \r",
							"console.log(\"response_salary = \" +resp.salary[0]);\r",
							"\r",
							"      // Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(\"respone_salary = \" +resp.salary[1])    \r",
							"\r",
							"      // Вывести в консоль 2-й элемент параметра salary параметр salary из response \r",
							"console.log(\"response_salary = \" +resp.salary[2])     \r",
							"\r",
							"      // Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"check_0_2000\", function () {\r",
							"    pm.expect(resp.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"      //Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"check_1_*2\", function () {\r",
							"    pm.expect(+resp.salary[1]).to.eql(req.salary*2);\r",
							"});\r",
							"    // Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"check_2_*3\", function () {\r",
							"    pm.expect(+resp.salary[2]).to.eql(req.salary*3);\r",
							"});\r",
							"    // Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", resp.name);\r",
							"\r",
							"    // Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", resp.age);\r",
							"\r",
							"    // Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", resp.salary[0]);\r",
							"\r",
							"        // ***Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"for (let i in resp.salary) {\r",
							"    console.log(resp.salary[i]);\r",
							"};\r",
							"\r",
							"    //И так тоже можно\r",
							"for (let i = 0; i < resp.salary.length; i++) {\r",
							"    console.log(resp.salary[i]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Спарсить response body в json\r",
							"//  Спарсить request\r",
							"var jsonData = pm.response.json();\r",
							"var req = request.data\r",
							"\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"resp = pm.response.json();\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"json_resp_have_person\", function () {\r",
							"    pm.expect(resp).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary\", function () {\r",
							"    pm.expect(+resp.start_qa_salary).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months\", function () {\r",
							"    pm.expect(+resp.qa_salary_after_6_months).to.eql(+req.salary * 2);\r",
							"});\r",
							"\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp.qa_salary_after_12_months).to.eql(+req.salary * 2.7);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"// var resp_qa_salary_after_1_5_year = jsonData[\"qa_salary_after_1.5_year\"];\r",
							"// console.log(\"resp_qa_salary_after_1.5_year = \"+ resp_qa_salary_after_1_5_year);\r",
							"// console.log(\"req_qa_salary_after_1.5_year = \"+ req_qa_salary_after_1_5_year);\r",
							"\r",
							"// pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"//     pm.expect(resp_qa_salary_after_1_5_year).to.eql(+req_salary*3.3);\r",
							"// }); \r",
							"\r",
							"pm.test(\"1.5_years_salary_check\", function () {\r",
							"    pm.expect(resp['qa_salary_after_1.5_year']).to.eql(+req.salary * 3.3);\r",
							"});\r",
							"\r",
							" // Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"3.5_years_salary_check\", function () {\r",
							"    pm.expect(resp['qa_salary_after_3.5_years']).to.eql(+req.salary * 3.8);\r",
							"});\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"person_salary_check_from_request\", function () {\r",
							"    pm.expect(resp.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"check_u_age_from_request\", function () {\r",
							"    pm.expect(resp.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"check_u_salary_5_years_from_request\", function () {\r",
							"    pm.expect(resp.person.u_salary_5_years).to.eql(+req.salary*4.2);\r",
							"});\r",
							"\r",
							"// ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in resp.person) {\r",
							"    console.log(resp.person[i]);\r",
							"};\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Sasha",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}